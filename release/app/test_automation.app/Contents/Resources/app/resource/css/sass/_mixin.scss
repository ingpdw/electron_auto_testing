@charset "utf-8";

@mixin hideText {
	@include hide-text;
	font-size: 0;
	line-height: 0;
}

@mixin word-wrap {
  -ms-word-break: break-all;
  word-break: break-all;
  word-break: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}

//:before, :after
@mixin clearfix {
	&:after{
	   content: ".";
	   visibility: hidden;
	   display: block;
	   height: 0;
	   clear: both;
   	}
}

@mixin ellipsis($no-wrap: true) {
  @if $no-wrap {
    white-space: nowrap;
  }
  overflow: hidden;
  @include experimental(text-overflow, ellipsis, not -moz, not -webkit, -o, -ms, not -khtml, official);
  @if $legacy-support-for-mozilla and $use-mozilla-ellipsis-binding {
    -moz-binding: stylesheet-url(unquote("xml/ellipsis.xml#ellipsis"));
  }
}

@mixin use-sprite($sprite, $offset-x: 0, $offset-y: 0) {
	background-image: sprite-url($icons);
	background-position: sprite-position($icons, $sprite, $offset-x, $offset-y);
	background-repeat: no-repeat;
	@include inline-block;
	//display: block;
	//overflow: hidden;
	height: image-height(sprite-file($icons, $sprite));
	width: image-width(sprite-file($icons, $sprite));

	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {
		background-image: sprite-url($icons-2x);
		background-size: (image-width(sprite-path($icons-2x)) / 2) (image-height(sprite-path($icons-2x)) / 2);
		background-position: round(nth(sprite-position($icons-2x, $sprite, $offset-x*2, $offset-y*2), 1) / 2) round(nth(sprite-position($icons-2x, $sprite, $offset-x*2, $offset-y*2), 2) / 2);
		//height: image-height(sprite-file($icons-2x, $sprite)) / 2;
		//width: image-width(sprite-file($icons-2x, $sprite)) / 2;
	}

	// @media (-webkit-min-device-pixel-ratio: 3), (min-resolution: 3dppx) {
	// 	background-image: sprite-url($icons-3x);
	// 	background-size: (image-width(sprite-path($icons-3x)) / 3) (image-height(sprite-path($icons-3x)) / 3);
	// 	background-position: round(nth(sprite-position($icons-3x, $sprite, $offset-x*3, $offset-y*3), 1) / 3) round(nth(sprite-position($icons-3x, $sprite, $offset-x*3, $offset-y*3), 2) / 3);
	// 	//height: image-height(sprite-file($icons-3x, $sprite)) / 3;
	// 	//width: image-width(sprite-file($icons-3x, $sprite)) / 3;
	// }
}

// background none-sprite
@mixin background-retina($file, $type, $contain: false) {
	background-image: url($file + '.' + $type);
	//2x
	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {
		background-image: url($file + '@2x.' + $type);
		@if $contain == true {
			background-size: contain;
		} @else {
			background-size: (image-width($file + '@2x.' + $type) / 2) (image-height($file + '@2x.' + $type) / 2);
		}
	}
	//3x
	@media (-webkit-min-device-pixel-ratio: 3), (min-resolution: 3dppx) {
		background-image: url($file + '@3x.' + $type);
		@if $contain == true {
			background-size: contain;
		} @else {
			background-size: (image-width($file + '@3x.' + $type) / 3) (image-height($file + '@3x.' + $type) / 3);
		}
	}
}

// $icons: sprite-map("icons/*.png", $layout: vertical);
// $icons-2x: sprite-map("icons@2x/*.png", $layout: vertical);
// $icons-3x: sprite-map("icons@3x/*.png", $layout: smart);


// media query
$breakPoint:769px;
$maxPoint:1300px;
@mixin respond-to($media) {
  @if $media == mobile {
    @media only screen and (max-width: $breakPoint  - 1 ) { @content; }
    // @media (orientation: portrait) { @content; }
  }
  @else if $media == pc {
     @media only screen and (min-width: $breakPoint)  { @content; }
	// @media (orientation: landscape) { @content; }
  }
   @else if $media == min {
     @media only screen and (max-width: $maxPoint  - 1 ) { @content; }
	// @media (orientation: landscape) { @content; }
  }
    @else if $media == max {
     @media only screen and (min-width: $maxPoint)  { @content; }
	// @media (orientation: landscape) { @content; }
  }
}


@mixin tran($type, $color, $percentage) {
    @if $type == color {
        //color: trans($color, $percentage);
        color: $color;
        color: rgba($color, $percentage);
    }
    @if $type == bg {
        background-color: $color;
        background-color: rgba($color, $percentage);
    }
}


//Font Awesome for Icon
@mixin iconic-font($name, $size, $color) {
	content: "#{$name}";
	font-size: $size;
	font-family: FontAwesome;
	font-weight: bold;
	color: $color;
}